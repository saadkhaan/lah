"use client";
import { useState, useEffect } from "react";
import { usePathname } from "next/navigation";
import { useRouter } from "next/navigation";
import Link from "next/link";
import DarkModeToggle from "./ThemeSwitch";
// import Logo from "./Logo";
import { IoHomeOutline } from "react-icons/io5";
export default function Navbar() {
	const [navbar, setNavbar] = useState(false);
	const [showServicesDropdown, setShowServicesDropdown] = useState(false);
	const pathname = usePathname();
	const router = useRouter();
	const [scrollPosition, setScrollPosition] = useState(0);
	const navItems = [
		{ id: 0, href: "/", label: <IoHomeOutline /> },
		{
			id: 1,
			href: "/services",
			label: "Services",
			subItems: [
				// Add a 'subItems' array for dropdown items
				{
					id: 10,
					href: "/web-development-services-in-dubai",
					label: "Web Design & Development",
				},
				{
					id: 11,
					href: "/seo-services-in-dubai",
					label: "SEO Services in Dubai",
				},
				{
					id: 12,
					href: "/app-development",
					label: "App & Software Development",
				},
			],
		},
		{ id: 2, href: "/work", label: "Work" },
		{ id: 3, href: "/contact", label: "Contact" },
	];

	useEffect(() => {
		const handleScroll = () => {
			setScrollPosition(window.scrollY);
		};

		window.addEventListener("scroll", handleScroll);

		return () => {
			window.removeEventListener("scroll", handleScroll);
		};
	}, []);
	return (
		<header
			className={`fixed top-0 z-50 w-full  px-4  transition-all md:shadow-sm ${
				scrollPosition > 50
					? "bg-slate-50/50 backdrop-blur-md dark:bg-slate-700 sm:px-8 lg:px-32"
					: "bg-slate-50 dark:bg-slate-800 lg:px-6"
			}`}
		>
			<nav>
				<div className="mx-auto justify-between md:flex md:items-center">
					<div className="flex items-center justify-between py-3 md:block md:py-5">
						<div
							className={`transition-all duration-300 ${
								scrollPosition > 50 ? "w-36 md:w-48" : "w-60 md:w-64"
							}`}
						>
							<Link href="/">
								{/* <Logo /> */}
								L.A.H
							</Link>
						</div>
						<div className="md:hidden">
							<button
								className="mr-4 rounded-md p-2 text-white outline-none focus:border focus:border-slate-400 dark:text-slate-300"
								onClick={() => setNavbar((prev) => !prev)}
							>
								{navbar ? (
									<svg
										xmlns="http://www.w3.org/2000/svg"
										className="h-6 w-6 text-slate-800 dark:text-slate-300"
										viewBox="0 0 20 20"
										fill="currentColor"
									>
										<path
											fillRule="evenodd"
											d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
											clipRule="evenodd"
										/>
									</svg>
								) : (
									<svg
										xmlns="http://www.w3.org/2000/svg"
										className="h-6 w-6 text-slate-800 dark:text-slate-300 "
										fill="none"
										viewBox="0 0 24 24"
										stroke="currentColor"
										strokeWidth={2}
									>
										<path
											strokeLinecap="round"
											strokeLinejoin="round"
											d="M3.75 6.75h16.5M3.75 12h16.5M12 17.25h8.25"
										/>
									</svg>
								)}
							</button>
							<DarkModeToggle />
						</div>
					</div>
					<div
						className={`justify-self-center pb-3 md:mt-0 md:block md:pb-0 ${
							navbar ? "block" : "hidden"
						}`}
					>
						<ul className="items-center justify-center space-y-8 md:flex md:space-x-10 md:space-y-0">
							{navItems.map((link) => {
								const isActive = pathname === link.href;
								return (
									<li
										key={link.id}
										className="nav-item relative"
										onMouseEnter={() =>
											link.label === "Services" && setShowServicesDropdown(true)
										}
										onMouseLeave={() =>
											link.label === "Services" &&
											setShowServicesDropdown(false)
										}
									>
										{link.subItems ? (
											// Dropdown structure
											<div className={showServicesDropdown ? "group" : ""}>
												<button
													className={`${
														isActive ? "active" : ""
													} flex items-center dark:text-slate-300 py-3`}
													onClick={() =>
														setShowServicesDropdown(!showServicesDropdown)
													}
												>
													{link.label}

													{/* Conditional SVG rendering */}
													{showServicesDropdown ? (
														<svg
															xmlns="http://www.w3.org/2000/svg"
															className="ml-1 h-4 w-4"
															fill="none"
															viewBox="0 0 24 24"
															stroke="currentColor"
															strokeWidth={2}
														>
															<path
																strokeLinecap="round"
																strokeLinejoin="round"
																d="M5 15l7-7 7 7"
															/>{" "}
															{/* Open state icon */}
														</svg>
													) : (
														<svg
															xmlns="http://www.w3.org/2000/svg"
															className="ml-1 h-4 w-4"
															fill="none"
															viewBox="0 0 24 24"
															stroke="currentColor"
															strokeWidth={2}
														>
															<path
																strokeLinecap="round"
																strokeLinejoin="round"
																d="M19 9l-7 7-7-7"
															/>{" "}
															{/* Closed state icon */}
														</svg>
													)}
												</button>

												<ul
													className={`absolute top-12 z-20 w-96 rounded-md bg-white p-4 shadow-md transition-all dark:bg-slate-800  ${
														showServicesDropdown
															? "visible opacity-100"
															: "invisible opacity-0"
													}`}
												>
													{link.subItems.map((subLink) => (
														<li
															key={subLink.id}
															className="nav-item border-b-2 border-slate-300 py-2"
														>
															<Link
																href={subLink.href}
																onClick={() => {
																	setNavbar(false);
																	setShowServicesDropdown(false);
																}}
															>
																{subLink.label}
															</Link>
														</li>
													))}
												</ul>
											</div>
										) : (
											// Regular link
											<Link
												className={isActive ? "active" : "nav-item"}
												href={link.href}
												onClick={() => setNavbar(false)}
											>
												{link.label}
											</Link>
										)}
									</li>
								);
							})}
							<div className="flex items-center justify-between md:gap-4">
								<li className="border-1 group border border-accent bg-transparent text-slate-50 transition-all duration-200 hover:border-[#f5890c] hover:bg-[#836B3F]  dark:bg-accent dark:outline dark:outline-1 dark:outline-accent dark:hover:bg-[#836B3F]">
									<Link href="/contact" legacyBehavior>
										<a className="flex items-center space-x-1 px-4 py-2 text-slate-800 transition-all duration-200 hover:shadow-xl group-hover:text-white dark:text-slate-50">
											<span>Start a Project</span>
											<svg
												xmlns="http://www.w3.org/2000/svg"
												fill="none"
												viewBox="0 0 24 24"
												strokeWidth={1.5}
												stroke="currentColor"
												className="h-6 w-6"
											>
												<path
													strokeLinecap="round"
													strokeLinejoin="round"
													d="M4.5 12h15m0 0l-6.75-6.75M19.5 12l-6.75 6.75"
												/>
											</svg>
										</a>
									</Link>
								</li>
								<li className="hidden sm:block">
									<DarkModeToggle />
								</li>
							</div>
						</ul>
					</div>
				</div>
			</nav>
		</header>
	);
}
